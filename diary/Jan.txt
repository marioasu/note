2015
======
Jan
==============
1.9
==============
测试地址
--------------
http://test3.hellokey.com/

企业邮箱
--------------
szp@arttact.com

团队协作
--------------
https://tower.im/

邮件平台
--------------
http://sendcloud.sohu.com/

短信服务商
--------------
- 1.http://www.yunpian.com/		
0.055(50000条以下) - 0.050 元/条   POST ONLY   Accept:text/plain;charset=utf-8;Content-Type:application/x-www-form-urlencoded;charset=utf-8;
文字限制：70/67字一条		防骚扰：30s一次5分钟3次

- 2.http://www.yuntongxun.com/
语音支持  0.06/条(无最低消费)	 0.058/条(500元/月最低消费)		Accept:application/xml;
Content-Type:application/xml;charset=utf-8; 
Content-Length:256;   改变头可以设置xml或者json格式
65字/条
http://www.rdsms.net/

sublime package control
--------------
import urllib2,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) if not os.path.exists(ipp) else None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler()) ); by = urllib2.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); open( os.path.join( ipp, pf), 'wb' ).write(by) if dh == h else None; print('Error validating download (got %s instead of %s), please try manual install' % (dh, h) if dh != h else 'Please restart Sublime Text to finish installation') 

1.10
======
php
------
define() 定义常量
defined() 判断常量是否定义
    isset() 对于变量或数组中的元素
    function_exists() 对于函数
    empty() 是(boolean)var 的反义词
constant() 返回常量值

array_merge() 合并一个或多个数组
    字符键名后面覆盖前面 数字键名不覆盖 数字键名重新索引

wampserver多版本
------
http://windows.php.net/download/

1.11
======
windows上使用composer
------
- 安装composer
    C:\bin>php -r "readfile('https://getcomposer.org/installer');" | php
    C:\bin>echo @php "%~dp0composer.phar" %*>composer.bat 简化php composer.phar 到composer  加入环境变量
- composer global require "fxp/composer-asset-plugin:1.0.0-beta4" composer插件 用于管理bower和npm包
- composer create-project --prefer-dist yiisoft/yii2-app-basic basic 用composer安装yii2 basic版本并重命名

- github Oauth
    到github的Applications里生成Oauth并在第一次复制(以后就看不到了)
        我的:0e4bf69d6c81b36d1a028d852336fca330a14108
    加入到composer的配置
        composer config -g github-oauth.github.com <oauthtoken>

yii2学习
------
- 基础controller
    [[yii\web\Controller::render()|render()]] 被用来渲染视图文件
    继承自yii\base\Controller
    含render($view, $params = [])方法

- 视图
    标签写法,encode()防恶意代码<?= Html::encode($message); ?>

- model
    model包含一个名为 rules() 的方法，用来返回数据验证规则的集合
    可以调用 [[yii\base\Model::validate()|validate()]] 方法触发数据验证
    如果有数据验证失败，将把 [[yii\base\Model::hasErrors|hasErrors]] 属性设为 ture，想要知道具体发生什么错误就调用 [[yii\base\Model::getErrors|getErrors]]

- Yii
    Yii::$app->request->post() 接收到的post数据
    表达式 Yii::$app 代表应用实例，它是一个全局可访问的单例。同时它也是一个服务定位器，能提供 request，response，db 等等特定功能的组件
    由 Yii 的 [[yii\web\Request::post()]] 方法负责搜集post数据
    实践中你应该考虑使用 [[yii\web\Controller::refresh()|refresh()]] 或 [[yii\web\Controller::redirect()|redirect()]] 去避免表单重复提交问题
- ActiveForm
    视图使用了一个功能强大的小部件 [[yii\widgets\ActiveForm|ActiveForm]] 去生成 HTML 表单
    <?php $form = ActiveForm::begin(); ?> // 渲染表单开始标签
    <?php ActiveForm::end();?> // 渲染表单关闭标签
    用[[yii\widgets\ActiveForm::field()|field()]] 方法去创建输入框
    用 [[yii\helpers\Html::submitButton()]] 方法生成提交按钮

- 使用数据库
    Yii::$app->db 表达式可config/db.php 的配置数据
    基础类 [[yii\db\ActiveRecord]]
    类名对应表名,可以覆写 [[yii\db\ActiveRecord::tableName()|tableName()]] 方法去显式指定相关表名

    $query = AR::find()
    $query->count()
    $record = AR::findOne($primaryKey)
    $record->attr = 'xxx';
    $record->save()

- 分页类 use yii\data\Pagination;
    为 SQL 查询语句设置 offset 和 limit从句，确保每个请求只需返回一页数据
    在视图中显示一个由页码列表组成的分页器
    使用 [[yii\widgets\LinkPager]] 去渲染从操作中传来的分页信息

- Gii 生成代码
    Model Generator
        tableName()
        rules()
        attributeLabels()

1.12
======
ThinkPHP 框架
------
入口可用定义
	define('RUNTIME_PATH','./Runtime/'); // 定义运行时目录
	define('DIR_SECURE_FILENAME', 'default.html'); // 自定义目录安全文件
	define('BUILD_DIR_SECURE', false); // 关闭生成安全文件
	define('CONF_EXT','.ini'); // 配置文件后缀  yaml/json/xml/ini
	define('CONF_PARSE','parse_test'); // 配置文件对应的解析函数
	define('COMMON_PATH','./Common/'); // 公共模块位置
	define('BIND_MODULE','Admin'); // 绑定Admin模块到当前入口文件 默认生成IndexController
	define('BUILD_CONTROLLER_LIST','Index,User,Menu'); // 生成更多的控制器
	define('BUILD_MODEL_LIST','User,Menu'); // 生成模型
	// 定义存储类型和应用模式为SAE（用于支持SAE平台）
	define('STORAGE_TYPE','sae');
	define('APP_MODE','sae');

config.php
	'LOAD_EXT_CONFIG' => 'user,db', // 加载扩展配置文件 user.php和db.php
	'LOAD_EXT_CONFIG' => array('USER'=>'user','DB'=>'db'), // 获取方式改变 C('USER.USER_AUTH_ID');
	'AUTOLOAD_NAMESPACE' => array(
	    'My'     => THINK_PATH.'My',
	    'One'    => THINK_PATH.'One',
	) // 自动加载命名空间 默认的有Library和模块命名空间
	类库映射的方式优先且效率高于命名空间

A方法-实例化控制器
	A('模块/控制器') -- 同模块下可省略模块

U方法-动态生成URL
	U('地址表达式',['参数'],['伪静态后缀'],['显示域名'])
	[模块/控制器/操作#锚点@域名]?参数1=值1&参数2=值2... // 地址表达式的格式
	参数支持数组和字符串
	模板中采用 {:U('参数1', '参数2'…)} 的方式使用U方法

系统的\Think\Controller类
	1.提供了ajaxReturn方法用于AJAX调用后返回数据给客户端 // AJAX返回
	2.success 和 error 方法 (提示信息[,地址[,等待时间]]) 
		跳转地址是可选的，success方法的默认跳转地址是$_SERVER["HTTP_REFERER"],error方法的默认跳转地址是javascript:history.back(-1);

	3.redirect方法 地址和U方法一致 
		$this->redirect('New/category', array('cate_id' => 2), 5, '页面跳转中...');
		直接使用redirect('.../New/category/cate_id/2', 5, '页面跳转中...') 跳转到指定URL

I方法-用于更加方便和安全的获取系统输入变量,可以用于任何地方
	I('变量类型.变量名/修饰符',['默认值'],['过滤方法'],['额外数据源']) // 用法
    param变量类型支持自动判断当前请求类型
    path变量可以获取PATHINFO模式参数
    data类型变量可以用于获取不支持的变量类型的读取
        I('data.file1','','',$_FILES)
    默认过滤机制 htmlspecialchars
    FILTER_VALIDATE_EMAIL (?
        修饰符 作用
        s   强制转换为字符串类型
        d   强制转换为整形类型
        b   强制转换为布尔类型
        a   强制转换为数组类型
        f   强制转换为浮点类型

请求类型
    常量  说明
    IS_GET  判断是否是GET方式提交
    IS_POST 判断是否是POST方式提交
    IS_PUT  判断是否是PUT方式提交
    IS_DELETE   判断是否是DELETE方式提交
    IS_AJAX 判断是否是AJAX提交
    REQUEST_METHOD  当前提交类型

git
------
git config --global user.name "xx" // 设置用户名
git config --global user.email "xx@xxx.com" // 设置邮箱

1.13
=======
空操作
    public function _empty() // 仅在你的控制器类继承系统的Think\Controller类才有效 否则可以自定义__call()
    class EmptyController extends Controller // 空控制器

模型
-------
模型定义
    只有在需要封装单独的业务逻辑的时候，模型类才是必须被定义的

    属性  说明
    tablePrefix 定义模型对应数据表的前缀，如果未定义则获取配置文件中的DB_PREFIX参数
    tableName   不包含表前缀的数据表名称，一般情况下默认和模型名称相同，只有当你的表名和当前的模型类的名称不同的时候才需要定义。
    trueTableName   包含前缀的数据表名称，也就是数据库中的实际表名，该名称无需设置，只有当上面的规则都不适用的情况或者特殊情况下才需要设置
    dbName  定义模型当前对应的数据库名称，只有当你当前的模型类对应的数据库名称和配置文件不同的时候才需要定义

实例化
    $User = new \Home\Model\UserModel();
    new \Home\Model\NewModel(['模型名'],['数据表前缀'],['数据库连接信息']); // 带参数实例化模型类
    数据表前缀传入空字符串表示取当前配置的表前缀，如果当前数据表没有前缀，则传入null即可
    数据库调试模式 (?

数据库配置
    'DB_TYPE'      =>  '',     // 数据库类型
    'DB_HOST'      =>  '',     // 服务器地址
    'DB_NAME'      =>  '',     // 数据库名
    'DB_USER'      =>  '',     // 用户名
    'DB_PWD'       =>  '',     // 密码
    'DB_PORT'      =>  '',     // 端口
    'DB_PREFIX'    =>  '',     // 数据库表前缀
    'DB_DSN'       =>  '',     // 数据库连接DSN 用于PDO方式
    'DB_CHARSET'   =>  'utf8', // 数据库的编码 默认为utf8

D方法-实例化具体数据模型
    如果在Linux环境下面，一定要注意D方法实例化的时候的模型名称的大小写// 大驼峰
    如果不存在自定义模型类(自己模块下/Common下) 则实例化\Think\Model基类
    支持跨模块 // 此时不加载公共模块的模型类
M方法-不加载具体模型类,性能更高
    $User = M('User'); // 和用法 $User = new \Think\Model('User'); 等效
    $User = M('db_name.User','ot_'); // 支持跨库操作
    $New  = M('new','think_',$connection); // 参数和和\Think\Model类一样
    $User = M('\Home\Model\CommonModel:User','think_','db_config'); // 实例化公共模型类
    使用M方法的前提是未定义具体的模型类
    $Model = M(); // $Model = new Model(); 实例化控模型,可用于执行原生SQL
    D方法没找到定义的模型类,则会自动调用M方法
